"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os                 
from dotenv import load_dotenv
import dj_database_url
import ssl

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-=_=dl3zd6$&uhb8acosjugujlhzgsyugmp8np$$0iu5i*)lf68')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'
print(f"--- DEBUG setting value: {DEBUG} (Type: {type(DEBUG)}) ---")

# Configure ALLOWED_HOSTS based on environment
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    'rest_framework',
    'api',
    'corsheaders',
    'django_ratelimit',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',    # <<< CORRECT POSITION
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'django_ratelimit.middleware.RatelimitMiddleware',
    # 'whitenoise.middleware.WhiteNoiseMiddleware', # <<< REMOVE FROM HERE
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        conn_max_age=600, # Optional: connection pooling setting
        conn_health_checks=True, # Optional: enable health checks
        default=os.environ.get('DATABASE_URL')
    )
}
# Handle case where DATABASE_URL might not be set (e.g., initial setup)
if not DATABASES['default']:
     DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# Cache Configuration (Using Upstash Redis via django-redis)
REDIS_URL = os.environ.get('REDIS_URL')

# --- KEEP THE FOLLOWING if/else BLOCK ---
if REDIS_URL:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": REDIS_URL,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                # Add SSL options for Upstash/Redis Cloud
                "CONNECTION_POOL_KWARGS": {
                    "ssl_cert_reqs": ssl.CERT_REQUIRED # <<< CORRECTED VALUE
                    # "ssl_check_hostname": False, # Try adding this if CERT_REQUIRED alone doesn't work
                }
            }
        }
    }
else:
    # Fallback to local memory cache if REDIS_URL is not set
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake', # Just needs a name
        }
    }
# --- END OF BLOCK TO KEEP ---

# --- Rate Limiting ---
RATELIMIT_CACHE_BACKEND = 'default'
RATELIMIT_ENABLE = not DEBUG
print(f"--- RATELIMIT_ENABLE setting value: {RATELIMIT_ENABLE} ---")
RATELIMIT_KEY_PREFIX = "rl"
RATELIMIT_GROUP_PREFIX = "rlg"
RATELIMIT_BLOCK = True
RATELIMIT_VIEW = 'api.views.ratelimited_error' # Point to our custom function
# --- END REPLACEMENT ---

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/stable/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / 'staticfiles' # Keep STATIC_ROOT defined, Whitenoise might still use it internally

# CHANGE THE STORAGE BACKEND:
# Use a simpler storage that doesn't require the manifest from collectstatic
STATICFILES_STORAGE = 'whitenoise.storage.StaticFilesStorage'
# PREVIOUSLY: 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# --- ADD THIS LINE TO SILENCE THE CHECK IN DEBUG MODE ---
SILENCED_SYSTEM_CHECKS = ['django_ratelimit.E003'] if DEBUG else []
# --- END ADDITION ---

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# --- REPLACE previous LOGGING config with this ---
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': { # Optional: Add a formatter for clearer logs
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': { # Add a simple formatter if needed elsewhere
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'DEBUG', # Set console handler level to DEBUG
            'formatter': 'verbose', # Use the verbose formatter
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO', # Keep root at INFO generally
    },
    'loggers': {
         'django.request': { # Keep logging request errors
             'handlers': ['console'],
             'level': 'ERROR',
             'propagate': False,
         },
         # --- ADD/MODIFY THESE ---
         'django_redis': {
             'handlers': ['console'],
             'level': 'DEBUG', # Show detailed cache operations
             'propagate': False, # Don't pass up to root
         },
         'django_ratelimit': {
             'handlers': ['console'],
             'level': 'DEBUG', # Show detailed rate limit checks
             'propagate': False, # Don't pass up to root
         }
         # --- END ADDITION/MODIFICATION ---
    }
}
# --- END REPLACEMENT ---

# CORS Settings (adjust as needed for production)
CORS_ALLOW_ALL_ORIGINS = DEBUG # Allow all origins only in DEBUG mode
# Or, specify allowed origins for production:
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:5173", # Your Vite dev server
#     "https://your-vercel-frontend-url.vercel.app", # Your deployed frontend
# ]

# Django REST Framework Settings (optional for now, can add pagination later)
# REST_FRAMEWORK = {
#     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
#     'PAGE_SIZE': 10
# }

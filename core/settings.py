"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os                 
import dj_database_url    
from dotenv import load_dotenv
import ssl

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env') # Add this line, specifying the path relative to BASE_DIR

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# It's recommended to load this from an environment variable as well
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-=_=dl3zd6$&uhb8acosjugujlhzgsyugmp8np$$0iu5i*)lf68')

# SECURITY WARNING: don't run with debug turned on in production!
# Load DEBUG from env var, default to True for development
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

# Configure ALLOWED_HOSTS based on environment
# For Vercel, you'll need to add your deployment URL later
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '127.0.0.1,localhost').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    'rest_framework',
    'api',
    'corsheaders',
    'django_ratelimit',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',    # <<< CORRECT POSITION
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'django_ratelimit.middleware.RatelimitMiddleware',
    # 'whitenoise.middleware.WhiteNoiseMiddleware', # <<< REMOVE FROM HERE
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        conn_max_age=600, # Optional: connection pooling setting
        conn_health_checks=True, # Optional: enable health checks
        default=os.environ.get('DATABASE_URL')
    )
}
# Handle case where DATABASE_URL might not be set (e.g., initial setup)
if not DATABASES['default']:
     DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# Cache Configuration (Using Upstash Redis via django-redis)
REDIS_URL = os.environ.get('REDIS_URL')
print(f"DEBUG: REDIS_URL read from environment: '{REDIS_URL}'") # Add this line

if REDIS_URL:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": REDIS_URL, # Use the full URL from the environment variable
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                # Upstash often requires SSL connection
                "CONNECTION_POOL_KWARGS": {
                    "ssl_cert_reqs": ssl.CERT_REQUIRED, # Use ssl.CERT_REQUIRED
                    "ssl_check_hostname": True,         # Explicitly set to True
                }
            }
        }
    }
    RATELIMIT_USE_CACHE = 'default'
else:
    # Fallback for local development if REDIS_URL is not set
    # (You could keep the LocMemCache or FileBasedCache here if desired,
    # but since you have REDIS_URL in .env, this 'else' might not be hit locally)
    print("WARNING: REDIS_URL not found in environment. Falling back to LocMemCache.")
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'local-dev-fallback-cache',
        }
    }
    RATELIMIT_USE_CACHE = 'default'

# Django Ratelimit Settings
RATELIMIT_USE_CACHE = 'default' # This will now use the Redis cache via django-redis


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/stable/howto/static-files/

STATIC_URL = "static/"
# Add STATIC_ROOT for production deployments (e.g., Vercel)
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Storage backend that compresses files and adds unique hashes
# Recommended for use with Whitenoise
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS Settings (adjust as needed for production)
CORS_ALLOW_ALL_ORIGINS = DEBUG # Allow all origins only in DEBUG mode
# Or, specify allowed origins for production:
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:5173", # Your Vite dev server
#     "https://your-vercel-frontend-url.vercel.app", # Your deployed frontend
# ]

# Django REST Framework Settings (optional for now, can add pagination later)
# REST_FRAMEWORK = {
#     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
#     'PAGE_SIZE': 10
# }

# Django Ratelimit Settings (basic example, keys/rates defined in views)
RATELIMIT_USE_CACHE = 'default' # Use default Django cache
